Everyone update it if already taken care of the feautres mentioned below:

TODO: Verify/Make it work:
------

The Landing View
-------------------
 Your program should clean any data sent from the form.

The Write Something View
------------------------
 The form method should be post and the POST-REDIRECT-GET design pattern should be used. --- Has Post-Redirect-Get : but gets nothing as of now.

 After saving, the user should still see their story and other info. Your controllers should clean any data sent from this form.

Data Validations:
 There should be a fixed maximum length for each of the fields which is specified in your configs/Config.php file, and the maximum length of the textarea data should be 5000 characters.You should display some kind of error generated by the server (not client side) if data size limits were exceeded. 

 If a user clicks on Write Something! on the landing page and comes to this view where nothing is filled in, enters an identifier, and clicks Save; your program should try to look up in the database to find a story with that identifier, and if so, show all the fields of that story for editing.

The Read A Story View
-------------------------
 This view should have as title "Five Thousand Characters - Story Title". Here "Story Title" is the title of the story that the link from the landing page had. "Five Thousand Characters - Story Title" should also appear at the top of the page in a centered h1-tag, where "Five Thousand Characters" is a link taking one back to the landing page.
 Beneath this centered in a div tag should appear the author, and beneath this the date the story was first saved. 
 Finally, beneath this there should be the text "Your rating:" followed by the numbers 1 to 5 and then "Average Rating:" followed by the current average rating. 
 If the user has already given a rating, the rated number should be in bold face and none of the numbers should be links. If the user has not rated the story, each of these numbers should be links. 
 When a user clicks a rating's link, two columns in a database table row associated with the stories identifier should be adjusted: the SUM_OF_RATINGS_SO_FAR and the NUMBER_OF_RATINGS_SO_FAR. These two values are used to compute the current average rating. 
 To prevent, in a crude way, people from voting multiple times and to decide whether to display rating's links or not, you should store in the current session the identifiers of the stories that the current user has rated. Under the ratings info should appear the actual story that was saved. This should appear in a sequence of paragraph tags. New paragraphs should be output whenever the original text that was saved had two consecutive new line characters.


index.php -- entry point into your project. No other file in your project should be directly linked-to.
    All urls used as links by your project should be in the format:
    BASE_URL/index.php?c=name_of_controller&m=name_of_method&arg1=value_for_arg1& ...&argn=value_for_argn 
src
 |-configs -- should have a Config.php class with constants for things like database user, password, host, port, etc.
 |            Basically, it should have anything you think the grader might need to get your program running on my machine.
 |            It should have a script CreateDB.php which can be run from the command-line to make a good initial
 |            database. Your database tables
 |-controllers -- should contain all the controller classes you write, one per file
 |-models -- should contain all the model classes you write, one per file
 |-resources -- should contain any resources used by your app such as images
 |-styles -- should have any external stylesheets you need
 |-views -- should contain all the view classes you write, one per file
      |-elements -- should contain all the element classes you write, one per file
      |-helpers -- should contain all the helper classes you write, one per file    

 A controller can use request information to make database calls to get/set/update info in the database, then choose a view, instantiate it, and call its render method to display a web page back to the requesting browser. 

 Only subclasses of Model are allowed to interact with the database. 

 Controllers should make sure to sanitize and validate user data, for example, using filter_var, filter_input, or filter_input_array functions. 

 The base Model class should have methods for performing the initial connection to the database. 

 Only subclasses of View, Element, and Helper are allowed to render HTML. Subclasses of View are responsible for drawing one complete web page. This method should mainly run in PHP copy mode (not interpreted mode) and contain mainly HTML. You are allowed method calls (no recursion) and if-elseif-else constructs, but no looping. A subclass Element is used to encapsulate a reusable fragment of a webpage. The base class should have a public field $view which is initialized in the base constructor to point to the view the element is currently on. The base Element class should also have an public abstract method render($data). 

A subclass of Controller is not allowed to directly instantiate a subclass of Element, but a subclass of View can. 

As with views, elements are allowed method calls and if-elseif-else constructs, but no looping. The render method again should mainly use PHP copy mode to output HTML. 

Finally, subclasses of Helper are used to output common widgets which may appear on views or elements and may require iterating over data in an array to output. 

The Helper base class should also have an abstract method public abstract method render($data). Only views and elements are allowed to instantiate helpers. The render method of a helper is allowed to use looping.

-------------------------------------------------------------------------------
Point Breakdown

index.php sole entry point into website (1/2pt). All urls used in the project follow format described (1/2pt).  1pt
Project files and classes organized as above (1/2pt). Namespaces on files as described (1/2pt). 1pt
Genre types (1/2pt), Write Something form data (1/2pt), and Read Something rating data (1/2pt) persistently stored in Mysql DBMS in BCNF tables (1/2pt) 2pts
Landing view general appearance as described (1/2pt), three ordered lists contain links to stories ordered as described (1/2pt) 1pt
Landing page Phrase Filter and Genre form works as described.   1pt
Sessions are used to remember Phrase Filter and Genre settings (1/2pt) and are used to remember if the current user voted on a given story (1/2pt). 1pt
Write Something View appearance as described (1/2pt). Write Something form Reset and Save buttons work as described with POST-REDIRECT-GET design pattern on save (1/2pt).  1pt
Before persisting form data, data is cleaned and checked as described, if not of the correct format then an error message is given (1/2pt). Look up story by identifier works as by identifier works as described (1/2pt).  1pt
Read Something View appearance as described (1/2pt). Ratings links and storage works as described. (1/2pt)  1pt
Total   10pts