For this project we assume the DBMS being used is MySql. Unless stated otherwise all persistent information in this project should be stored in database tables. All of database tables should be in BCNF. You should make base classes Controller, Model, View, Element, and Helper. The namespaces for these and their subclasses should be respectively: cool_name_for_your_group\hw3\controllers, cool_name_for_your_group\hw3\models, cool_name_for_your_group\hw3\views, cool_name_for_your_group\hw3\views\elements, and cool_name_for_your_group\hw3\views\helpers. Your project should use the Model View Adapter pattern that we have discussed in class. Only controller classes are allowed to directly handle request/form data. A controller can use this information to make database calls to get/set/update info in the database, then choose a view, instantiate it, and call its render method to display a web page back to the requesting browser. Only subclasses of Model are allowed to interact with the database. Controllers should make sure to sanitize and validate user data, for example, using filter_var, filter_input, or filter_input_array functions. The base Model class should have methods for performing the initial connection to the database. Only subclasses of View, Element, and Helper are allowed to render HTML. Subclasses of View are responsible for drawing one complete web page. The base class should have a public abstract method render($data) which is implemented in sub-classes. This method should mainly run in PHP copy mode (not interpreted mode) and contain mainly HTML. You are allowed method calls (no recursion) and if-elseif-else constructs, but no looping. A subclass Element is used to encapsulate a reusable fragment of a webpage (for example, a signin form) which might appear on multiple views. The base class should have a public field $view which is initialized in the base constructor to point to the view the element is currently on. The base Element class should also have an public abstract method render($data). A subclass of Controller is not allowed to directly instantiate a subclass of Element, but a subclass of View can. As with views, elements are allowed method calls and if-elseif-else constructs, but no looping. The render method again should mainly use PHP copy mode to output HTML. Finally, subclasses of Helper are used to output common widgets which may appear on views or elements and may require iterating over data in an array to output. For example, outputting a select tag dropdown with many options coming from a field in $data. Another example might be to output the rows of a table based on an field from $data. The Helper base class should also have an abstract method public abstract method render($data). Only views and elements are allowed to instantiate helpers. The render method of a helper is allowed to use looping.


Point Breakdown

index.php sole entry point into website (1/2pt). All urls used in the project follow format described (1/2pt).  1pt
Project files and classes organized as above (1/2pt). Namespaces on files as described (1/2pt). 1pt
Genre types (1/2pt), Write Something form data (1/2pt), and Read Something rating data (1/2pt) persistently stored in Mysql DBMS in BCNF tables (1/2pt) 2pts
Landing view general appearance as described (1/2pt), three ordered lists contain links to stories ordered as described (1/2pt) 1pt
Landing page Phrase Filter and Genre form works as described.   1pt
Sessions are used to remember Phrase Filter and Genre settings (1/2pt) and are used to remember if the current user voted on a given story (1/2pt). 1pt
Write Something View appearance as described (1/2pt). Write Something form Reset and Save buttons work as described with POST-REDIRECT-GET design pattern on save (1/2pt).  1pt
Before persisting form data, data is cleaned and checked as described, if not of the correct format then an error message is given (1/2pt). Look up story by identifier works as by identifier works as described (1/2pt).  1pt
Read Something View appearance as described (1/2pt). Ratings links and storage works as described. (1/2pt)  1pt
Total   10pts